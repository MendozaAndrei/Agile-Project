<%- include ("../partials/navbar.ejs") %>
<style>
  .past-due {
  border: pink solid 3px;
}

.completed {
  border: rgb(179, 249, 179) solid 3px;
}
</style>

<div class="container">
  <div class="split">
    <section>
      <div class="contianer">
        <div class="calendar">
          <div class="calendar-header">
            <span class="month-picker" id="month-picker"> May </span>
            <div class="year-picker" id="year-picker">
              <span class="year-change" id="pre-year">
                <pre><</pre>
              </span>
              <span id="year">2020 </span>
              <span class="year-change" id="next-year">
                <pre>></pre>
              </span>
            </div>
          </div>
    
          <div class="calendar-body">
            <div class="calendar-week-days">
              <div>Sun</div>
              <div>Mon</div>
              <div>Tue</div>
              <div>Wed</div>
              <div>Thu</div>
              <div>Fri</div>
              <div>Sat</div>
            </div>
            <div class="calendar-days">
            </div>
          </div>
          <div class="calendar-footer">
          </div>
          <div class="date-time-formate">
            <div class="day-text-formate" style="color:black;"><a href="/reminders" style="color:black;">TODAY</a></div>
            <div class="date-time-value">
              <div class="time-formate">01:41:20</div>
              <div class="date-formate">03 - march - 2022</div>
            </div>
          </div>
          <div class="month-list"></div>
        </div>
      </div>
    </section>
    <div>
      <div id="reminder-list-menu">
        <a class="btn btn-secondary" id="create-reminder" href="/reminder/new">Create</a>
      </div>
      <ul class="box" id="list-group">
        <% if (reminders && reminders.length > 0) { %>
          <% reminders.forEach(function (reminderItem) { %>
            <% let isPastDue = new Date(reminderItem.dateDue) < new Date(); %>
            <li class="list-group-item <%= isPastDue && !reminderItem.completed ? 'past-due' : '' %> <%= reminderItem.completed ? 'completed' : '' %>">
              <div><a href=<%= "/reminder/" + reminderItem.id %>><strong><%= reminderItem.title %></strong></a>
                <div class="reminder-button"></div>
                <div class="reminder-menu"> 
                  <a href=<%= "/reminder/" + reminderItem.id + "/edit" %>>Edit</a>
                  <form class="deleteForm "method="POST" action=<%= "/reminder/delete/" + reminderItem.id %>>
                    <button type="submit" class="btn btn-danger">Delete</button>
                  </form>
                </div>
              </div>
              <% if (reminderItem.dateDue) { %>
                <% 
                let dueDate = new Date(reminderItem.dateDue);
                let formattedDate = (dueDate.getUTCMonth() + 1).toString().padStart(2, '0') + '-' + dueDate.getUTCDate().toString().padStart(2, '0') + '-' + dueDate.getUTCFullYear().toString().substring(2);
                %>
                <p><%= formattedDate %></p>
              <% } %>
        
              <%= reminderItem.description %>
            </li>
          <% }) %>
        <% } else { %>
          <li class="list-group-item">No reminders</li>
        <% } %>
</ul>
    </div>
  </div>
</div>
        
      
      </ul>
    </div>
  </div>
</div>

<script>
  const isLeapYear = (year) => {
  return (
    (year % 4 === 0 && year % 100 !== 0 && year % 400 !== 0) ||
    (year % 100 === 0 && year % 400 === 0)
  );
};
const getFebDays = (year) => {
  return isLeapYear(year) ? 29 : 28;
};
let calendar = document.querySelector('.calendar');
const month_names = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ];
let month_picker = document.querySelector('#month-picker');
const dayTextFormate = document.querySelector('.day-text-formate');
const timeFormate = document.querySelector('.time-formate');
const dateFormate = document.querySelector('.date-formate');

month_picker.onclick = () => {
  month_list.classList.remove('hideonce');
  month_list.classList.remove('hide');
  month_list.classList.add('show');
  dayTextFormate.classList.remove('showtime');
  dayTextFormate.classList.add('hidetime');
  timeFormate.classList.remove('showtime');
  timeFormate.classList.add('hideTime');
  dateFormate.classList.remove('showtime');
  dateFormate.classList.add('hideTime');
};

const generateCalendar = (month, year) => {
  let calendar_days = document.querySelector('.calendar-days');
  calendar_days.innerHTML = '';
  let calendar_header_year = document.querySelector('#year');
  let days_of_month = [
      31,
      getFebDays(year),
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31,
    ];

  let currentDate = new Date();

  month_picker.innerHTML = month_names[month];

  calendar_header_year.innerHTML = year;

  let first_day = new Date(year, month);

  for (let i = 0; i <= days_of_month[month] + first_day.getDay() - 1; i++) {
    let day = document.createElement('div');

    if (i >= first_day.getDay()) {
      day.innerHTML = i - first_day.getDay() + 1;

      if (i - first_day.getDay() + 1 === currentDate.getDate() &&
        year === currentDate.getFullYear() &&
        month === currentDate.getMonth()
      ) {
        day.classList.add('current-date');
      }

      day.addEventListener('click', function() {
      console.log(`Selected date is ${this.innerHTML}-${month+1}-${year}`);
      fetch(`/reminders/date?date=${year}-${month+1}-${this.innerHTML}`)
        .then(response => response.json())
        .then(reminders => {
          let remindersList = document.getElementById('list-group');
          remindersList.innerHTML = '';
          reminders.forEach(reminder => {


          let listItem = document.createElement('li');
          listItem.classList.add('list-group-item');

          let titleElement = document.createElement('strong');
          titleElement.textContent = reminder.title;
          listItem.appendChild(titleElement);

          let dueDateElement = document.createElement('p');
          dueDateElement.textContent = `${new Date(reminder.dateDue).toLocaleDateString()}`;
          listItem.appendChild(dueDateElement);
          
          let descriptionElement = document.createElement('p');
          descriptionElement.textContent = reminder.description;
          listItem.appendChild(descriptionElement);


          remindersList.appendChild(listItem);



          });
        });
    });
    }
    calendar_days.appendChild(day);
  }
};

let month_list = calendar.querySelector('.month-list');
month_names.forEach((e, index) => {
  let month = document.createElement('div');
  month.innerHTML = `<div>${e}</div>`;

  month_list.append(month);
  month.onclick = () => {
    currentMonth.value = index;
    generateCalendar(currentMonth.value, currentYear.value);
    month_list.classList.replace('show', 'hide');
    dayTextFormate.classList.remove('hideTime');
    dayTextFormate.classList.add('showtime');
    timeFormate.classList.remove('hideTime');
    timeFormate.classList.add('showtime');
    dateFormate.classList.remove('hideTime');
    dateFormate.classList.add('showtime');
  };
});

(function() {
  month_list.classList.add('hideonce');
})();
document.querySelector('#pre-year').onclick = () => {
  --currentYear.value;
  generateCalendar(currentMonth.value, currentYear.value);
};
document.querySelector('#next-year').onclick = () => {
  ++currentYear.value;
  generateCalendar(currentMonth.value, currentYear.value);
};

let currentDate = new Date();
let currentMonth = { value: currentDate.getMonth() };
let currentYear = { value: currentDate.getFullYear() };
generateCalendar(currentMonth.value, currentYear.value);

const todayShowTime = document.querySelector('.time-formate');
const todayShowDate = document.querySelector('.date-formate');

const currshowDate = new Date();
const showCurrentDateOption = {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  weekday: 'long',
};
const currentDateFormate = new Intl.DateTimeFormat(
  'en-US',
  showCurrentDateOption
).format(currshowDate);
todayShowDate.textContent = currentDateFormate;
setInterval(() => {
  const timer = new Date();
  const option = {
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
  };
  const formateTimer = new Intl.DateTimeFormat('en-us', option).format(timer);
  let time = `${`${timer.getHours()}`.padStart(
      2,
      '0'
    )}:${`${timer.getMinutes()}`.padStart(
      2,
      '0'
    )}: ${`${timer.getSeconds()}`.padStart(2, '0')}`;
  todayShowTime.textContent = formateTimer;
}, 1000);




</script>

